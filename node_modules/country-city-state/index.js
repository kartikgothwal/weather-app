const CountryCityStateError = require('./CountryCityStateError')
const countries = require('./countries.json')
const regions = require('./regions.json')
const cities = require('./cities.json')

class CountryCityState {
  constructor() {}

  get CountryCityState() {
    return CountryCityState
  }

  get countries() {
    return countries
  }

  get regions() {
    return regions
  }

  get cities() {
    return cities
  }

  getCountry(countryCode) {
    const country = countries.find(o => o.code === countryCode)
    if (!country) throw new CountryCityStateError('country-not-found', `Country not found: ${countryCode}`)
    return country
  }

  getRegion(regionCode) {
    const region = regions.find(o => o.code === regionCode)
    if (!region) throw new CountryCityStateError('region-not-found', `Region not found: ${regionCode}`)
    return region
  }

  getCity(cityId) {
    const city = cities.find(o => o.id === cityId)
    if (!city) throw new CountryCityStateError('city-not-found', `City not found: ${cityId}`)
    return city
  }

  getCountryRegions(countryCode) {
    return regions.filter(o => o.countryCode === countryCode)
  }

  getCountryCities(countryCode) {
    return cities.filter(o => o.countryCode === countryCode)
  }

  getRegionCities(regionCode) {
    return cities.filter(o => o.regionCode === regionCode)
  }
}

module.exports = new CountryCityState()
