const constants = require('./constants')

class Base58 {
  constructor(alphabet) {
    if (!new RegExp(constants.ALPHABET_PATTERN).test(alphabet)) throw new Error('Invalid alphabet')
    this.alphabet = alphabet
  }

  get Base58() {
    return Base58
  }

  encode(input) {
    return Buffer.from(input).reduce((bytes, carry, i) => {
      if (!(carry || bytes.length ^ i)) bytes.push(1)
      let j = 0
      while (j in bytes || carry) {
        carry += bytes[j] * 256 | 0
        bytes[j] = carry % 58 | 0
        carry = carry / 58 | 0
        j++
      }
      return bytes
    }, []).reverse().map(o => this.alphabet[o]).join('')
  }

  decode(input) {
    return String.fromCharCode(...input.split('').map(o => this.alphabet.indexOf(o)).reduce((bytes, carry, i) => {
      if (!(carry || bytes.length ^ i)) bytes.push(0)
      let j = 0
      while (j in bytes || carry) {
        carry += bytes[j] * 58 | 0
        bytes[j] = carry % 256 | 0
        carry = carry / 256 | 0
        j++
      }
      return bytes
    }, []).reverse())
  }

  encodeInt(input) {
    let int = input
    let str = ''
    let mod
    while (int >= 58) {
      mod = int % 58
      str = this.alphabet[mod] + str
      int = int / 58 | 0
    }
    return this.alphabet[int] + str
  }

  decodeInt(input) {
    return input.split('').reverse().reduce((int, char, i) => int + this.alphabet.indexOf(char) * Math.pow(58, i), 0)
  }
}

module.exports = new Base58(constants.DARKWOLF_ALPHABET)
